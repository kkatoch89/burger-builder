{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","withRouter","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","props","useState","elementType","elementConfig","type","placeholder","errorText","value","validation","required","isEmail","valid","touched","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","e","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","authRedirect","to","className","styles","Auth","onSubmit","preventDefault","btnType","clicked","input","inputElement","inputStyles","InputElement","Invalid","join","onChange","options","option","displayValue","validationError","Input","Label","label"],"mappings":"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","file":"static/js/4.4dce7898.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3IUpP\"};","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\n\r\nimport styles from './Auth.module.css';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nconst Auth = (props) => {\r\n\tconst [authForm, setAuthForm] = useState({\r\n\t\temail: {\r\n\t\t\telementType: 'input',\r\n\t\t\telementConfig: {\r\n\t\t\t\ttype: 'email',\r\n\t\t\t\tplaceholder: 'Email Address',\r\n\t\t\t\terrorText: 'email',\r\n\t\t\t},\r\n\t\t\tvalue: '',\r\n\t\t\tvalidation: {\r\n\t\t\t\trequired: true,\r\n\t\t\t\tisEmail: true,\r\n\t\t\t},\r\n\t\t\tvalid: false,\r\n\t\t\ttouched: false,\r\n\t\t},\r\n\t\tpassword: {\r\n\t\t\telementType: 'input',\r\n\t\t\telementConfig: {\r\n\t\t\t\ttype: 'password',\r\n\t\t\t\tplaceholder: 'Password',\r\n\t\t\t\terrorText: 'password',\r\n\t\t\t},\r\n\t\t\tvalue: '',\r\n\t\t\tvalidation: {\r\n\t\t\t\trequired: true,\r\n\t\t\t\tminLength: 6,\r\n\t\t\t},\r\n\t\t\tvalid: false,\r\n\t\t\ttouched: false,\r\n\t\t},\r\n\t});\r\n\r\n\tconst [isSignup, setIsSignup] = useState(true);\r\n\r\n\tconst { buildingBurger, authRedirectPath, onSetAuthRedirectPath } = props;\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!buildingBurger && authRedirectPath !== '/') {\r\n\t\t\tonSetAuthRedirectPath();\r\n\t\t}\r\n\t}, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\r\n\r\n\tconst inputChangedHandler = (e, controlName) => {\r\n\t\tconst updatedControls = updateObject(authForm, {\r\n\t\t\t[controlName]: updateObject(authForm[controlName], {\r\n\t\t\t\tvalue: e.target.value,\r\n\t\t\t\tvalid: checkValidity(e.target.value, authForm[controlName].validation),\r\n\t\t\t\ttouched: true,\r\n\t\t\t}),\r\n\t\t});\r\n\t\tsetAuthForm(updatedControls);\r\n\t};\r\n\r\n\tconst submitHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tprops.onAuth(authForm.email.value, authForm.password.value, isSignup);\r\n\t};\r\n\r\n\tconst switchAuthModeHandler = () => {\r\n\t\tsetIsSignup(!isSignup);\r\n\t};\r\n\r\n\tconst formElementsArray = [];\r\n\tfor (let key in authForm) {\r\n\t\tformElementsArray.push({\r\n\t\t\tid: key,\r\n\t\t\tconfig: authForm[key],\r\n\t\t});\r\n\t}\r\n\r\n\tlet form = formElementsArray.map((formElement) => {\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\tkey={formElement.id}\r\n\t\t\t\telementType={formElement.config.elementType}\r\n\t\t\t\telementConfig={formElement.config.elementConfig}\r\n\t\t\t\tvalue={formElement.config.value}\r\n\t\t\t\tinvalid={!formElement.config.valid}\r\n\t\t\t\tshouldValidate={formElement.config.validation} //To remove validation from dropdown\r\n\t\t\t\ttouched={formElement.config.touched}\r\n\t\t\t\tchanged={(e) => {\r\n\t\t\t\t\tinputChangedHandler(e, formElement.id);\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t);\r\n\t});\r\n\r\n\tif (props.loading) {\r\n\t\tform = <Spinner />;\r\n\t}\r\n\r\n\tlet errorMessage = null;\r\n\r\n\tif (props.error) {\r\n\t\terrorMessage = <p>{props.error}</p>;\r\n\t}\r\n\r\n\tlet authRedirect = null;\r\n\tif (props.isAuthenticated) {\r\n\t\tauthRedirect = <Redirect to={props.authRedirectPath} />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={styles.Auth}>\r\n\t\t\t{authRedirect}\r\n\t\t\t{errorMessage}\r\n\t\t\t<form onSubmit={submitHandler}>\r\n\t\t\t\t{form}\r\n\t\t\t\t<Button btnType=\"Success\">SUBMIT</Button>\r\n\t\t\t</form>\r\n\t\t\t<Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\r\n\t\t\t\tSWITCH TO {isSignup ? 'SIGN-IN' : 'SIGN-UP'}\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tloading: state.auth.loading,\r\n\t\terror: state.auth.error,\r\n\t\tisAuthenticated: state.auth.token !== null,\r\n\t\tbuildingBurger: state.burgerBuilder.building,\r\n\t\tauthRedirectPath: state.auth.authRedirectPath,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonAuth: (email, password, isSignup) =>\r\n\t\t\tdispatch(actions.auth(email, password, isSignup)),\r\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\r\n\t};\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Auth));\r\n","import React from 'react';\r\n\r\nimport styles from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\tlet inputElement = null;\r\n\tconst inputStyles = [styles.InputElement];\r\n\r\n\t// Using && props.touched to make sure invalid styling only applies after element\r\n\t// has been interacted with\r\n\tif (props.invalid && props.shouldValidate && props.touched) {\r\n\t\tinputStyles.push(styles.Invalid);\r\n\t}\r\n\r\n\tswitch (props.elementType) {\r\n\t\tcase 'input':\r\n\t\t\tinputElement = (\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={inputStyles.join(' ')}\r\n\t\t\t\t\t{...props.elementConfig}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase 'textarea':\r\n\t\t\tinputElement = (\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tclassName={inputStyles.join(' ')}\r\n\t\t\t\t\t{...props.elementConfig}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase 'select':\r\n\t\t\tinputElement = (\r\n\t\t\t\t<select\r\n\t\t\t\t\tclassName={inputStyles.join(' ')}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.elementConfig.options.map((option) => (\r\n\t\t\t\t\t\t<option key={option.value} value={option.value}>\r\n\t\t\t\t\t\t\t{option.displayValue}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tinputElement = (\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={inputStyles.join(' ')}\r\n\t\t\t\t\t{...props.elementConfig}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t}\r\n\r\n\tlet validationError = null;\r\n\tif (props.invalid && props.touched) {\r\n\t\tvalidationError = (\r\n\t\t\t<p>Please enter a valid {props.elementConfig.errorText}!</p>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={styles.Input}>\r\n\t\t\t<label className={styles.Label}>{props.label}</label>\r\n\t\t\t{inputElement}\r\n\t\t\t{validationError}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2BpkO\",\"Label\":\"Input_Label__3ndKw\",\"InputElement\":\"Input_InputElement__uy91I\",\"Invalid\":\"Input_Invalid__2W9pf\",\"ValidationError\":\"Input_ValidationError__3mcbI\"};"],"sourceRoot":""}